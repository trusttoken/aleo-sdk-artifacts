{"version":3,"file":"node-polyfill.js","sources":["../src/polyfill/crypto.ts","../src/polyfill/fetch.ts","../src/polyfill/xmlhttprequest.ts","../src/polyfill/worker.ts","../src/node-polyfill.ts"],"sourcesContent":["import { webcrypto } from \"node:crypto\";\n\nif ((globalThis as any).crypto == null) {\n    (globalThis as any).crypto = webcrypto;\n}\n","import * as $fs from \"node:fs\";\nimport $mime from \"mime/lite.js\";\n\n\nconst oldFetch = globalThis.fetch;\n\n// We always polyfill fetch because Node's fetch doesn't support file URLs.\n(globalThis.fetch as any) = async function (resource: URL | RequestInfo, options: RequestInit | undefined): Promise<Response> {\n    const request = new Request(resource, options);\n\n    const url = new URL(request.url);\n\n    if (url.protocol === \"file:\") {\n        const readStream = $fs.createReadStream(url);\n\n        const headers: HeadersInit = {};\n\n        const type = $mime.getType(url.pathname);\n\n        if (type) {\n            headers[\"Content-Type\"] = type;\n        }\n\n        return new Response(readStream as any, {\n            status: 200,\n            statusText: \"OK\",\n            headers,\n        });\n\n    } else {\n        return await oldFetch(request);\n    }\n};\n","import $request from \"sync-request\";\n\n\nglobalThis.XMLHttpRequest = class extends EventTarget implements XMLHttpRequest {\n    public static readonly UNSENT = 0;\n    public static readonly OPENED = 1;\n    public static readonly HEADERS_RECEIVED = 2;\n    public static readonly LOADING = 3;\n    public static readonly DONE = 4;\n\n    public readonly UNSENT = XMLHttpRequest.UNSENT;\n    public readonly OPENED = XMLHttpRequest.OPENED;\n    public readonly HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;\n    public readonly LOADING = XMLHttpRequest.LOADING;\n    public readonly DONE = XMLHttpRequest.DONE;\n\n    public responseType!: XMLHttpRequestResponseType;\n    public withCredentials!: boolean;\n    public timeout!: number;\n\n    public readonly readyState!: number;\n    public readonly response!: ArrayBuffer | Blob | Document | string | null;\n    public readonly responseText!: string;\n    public readonly responseURL!: string;\n    public readonly responseXML!: Document | null;\n    public readonly status!: number;\n    public readonly statusText!: string;\n    public readonly upload!: XMLHttpRequestUpload;\n\n    private _url!: string | URL | null;\n    private _mime!: string;\n\n    constructor() {\n        super();\n\n        this._reset();\n\n        this._mime = \"text/xml\";\n    }\n\n    private _reset() {\n        (this as any).readyState = XMLHttpRequest.UNSENT;\n        (this as any).response = null;\n        (this as any).responseText = \"\";\n        (this as any).responseType = \"\";\n        (this as any).responseURL = \"\";\n        (this as any).responseXML = null;\n        (this as any).status = 0;\n        (this as any).statusText = \"\";\n        (this as any).timeout = 0;\n        (this as any).upload = null;\n        (this as any).withCredentials = false;\n\n        this._url = null;\n    }\n\n    private _success() {\n        (this as any).readyState = XMLHttpRequest.DONE;\n        (this as any).status = 200;\n        (this as any).statusText = \"OK\";\n    }\n\n    public set onabort(value: () => void) {\n        throw new Error(\"Not implemented\");\n    }\n\n    public set onerror(value: () => void) {\n        throw new Error(\"Not implemented\");\n    }\n\n    public set onreadystatechange(value: () => void) {\n        throw new Error(\"Not implemented\");\n    }\n\n    public set onloadstart(value: () => void) {\n        throw new Error(\"Not implemented\");\n    }\n\n    public set onload(value: () => void) {\n        throw new Error(\"Not implemented\");\n    }\n\n    public set onloadend(value: () => void) {\n        throw new Error(\"Not implemented\");\n    }\n\n    public set onprogress(value: () => void) {\n        throw new Error(\"Not implemented\");\n    }\n\n    public set ontimeout(value: () => void) {\n        throw new Error(\"Not implemented\");\n    }\n\n    public abort() {\n        throw new Error(\"Not implemented\");\n    }\n\n    public overrideMimeType(mime: string) {\n        this._mime = mime;\n    }\n\n    public getResponseHeader(): string | null {\n        throw new Error(\"Not implemented\");\n    }\n\n    public getAllResponseHeaders(): string {\n        throw new Error(\"Not implemented\");\n    }\n\n    public setRequestHeader() {\n        throw new Error(\"Not implemented\");\n    }\n\n    public open(method: string, url: string | URL, async: boolean = true, username?: string | null | undefined, password?: string | null | undefined): void {\n        if (async) {\n            throw new Error(\"Async XMLHttpRequest is not implemented yet\");\n        }\n\n        if (method !== \"GET\") {\n            throw new Error(\"Non-GET requests are not implemented yet\");\n        }\n\n        this._reset();\n\n        this._url = url;\n    }\n\n    public send(body: null = null) {\n        if (body !== null) {\n            throw new Error(\"XMLHttpRequest send body is not implemented yet\");\n        }\n\n        if (!this._url) {\n            throw new Error(\"You must call open before you call send\");\n        }\n\n        const response = $request(\"GET\", this._url, {\n            headers: {\n                \"Content-Type\": this._mime,\n            }\n        });\n\n        const buffer = (response.body as Buffer).buffer;\n\n        const responseText = new TextDecoder(\"iso-8859-5\", { fatal: true }).decode(buffer);\n\n        (this as any).response = (this as any).responseText = responseText;\n\n        this._url = null;\n\n        this._success();\n    }\n};","function patch($worker: typeof import(\"node:worker_threads\"), $os: typeof import(\"node:os\")) {\n    // This is technically not a part of the Worker polyfill,\n    // but Workers are used for multi-threading, so this is often\n    // needed when writing Worker code.\n    if (globalThis.navigator == null) {\n        globalThis.navigator = {\n            hardwareConcurrency: $os.cpus().length,\n        } as Navigator;\n    }\n\n    globalThis.Worker = class Worker extends EventTarget {\n        private _worker: import(\"node:worker_threads\").Worker;\n\n        constructor(url: string | URL, options?: WorkerOptions | undefined) {\n            super();\n\n            if (url instanceof URL) {\n                if (url.protocol !== \"file:\") {\n                    throw new Error(\"Worker only supports file: URLs\");\n                }\n\n                url = url.href;\n\n            } else {\n                throw new Error(\"Filepaths are unreliable, use `new URL(\\\"...\\\", import.meta.url)` instead.\");\n            }\n\n            if (!options || options.type !== \"module\") {\n                throw new Error(\"Workers must use \\`type: \\\"module\\\"\\`\");\n            }\n\n            // This uses some funky stuff like `patch.toString()`.\n            //\n            // This is needed so that it can synchronously run the polyfill code\n            // inside of the worker.\n            //\n            // It can't use `require` because the file doesn't have a `.cjs` file extension.\n            //\n            // It can't use `import` because that's asynchronous, and the file path\n            // might be different if using a bundler.\n            const code = `\n                ${patch.toString()}\n\n                // Inject the polyfill into the worker\n                patch(require(\"node:worker_threads\"), require(\"node:os\"));\n\n                const { workerData } = require(\"node:worker_threads\");\n\n                // This actually loads and runs the worker file\n                import(workerData.url)\n                    .catch((e) => {\n                        // TODO maybe it should send a message to the parent?\n                        console.error(e.stack);\n                    });\n            `;\n\n            this._worker = new $worker.Worker(code, {\n                eval: true,\n                workerData: {\n                    url,\n                },\n            });\n\n            this._worker.on(\"message\", (data) => {\n                this.dispatchEvent(new MessageEvent(\"message\", { data }));\n            });\n\n            this._worker.on(\"messageerror\", (error) => {\n                throw new Error(\"UNIMPLEMENTED\");\n            });\n\n            this._worker.on(\"error\", (error) => {\n                // TODO attach the error to the event somehow\n                const event = new Event(\"error\");\n                this.dispatchEvent(event);\n            });\n        }\n\n        set onmessage(f: () => void) {\n            throw new Error(\"UNIMPLEMENTED\");\n        }\n\n        set onmessageerror(f: () => void) {\n            throw new Error(\"UNIMPLEMENTED\");\n        }\n\n        set onerror(f: () => void) {\n            throw new Error(\"UNIMPLEMENTED\");\n        }\n\n        postMessage(message: any, transfer: Array<Transferable>): void;\n        postMessage(message: any, options?: StructuredSerializeOptions | undefined): void;\n        postMessage(value: any, transfer: any) {\n            this._worker.postMessage(value, transfer);\n        }\n\n        terminate() {\n            this._worker.terminate();\n        }\n\n        // This is Node-specific, it allows the process to exit\n        // even if the Worker is still running.\n        unref() {\n            this._worker.unref();\n        }\n    };\n\n\n    if (!$worker.isMainThread) {\n        const globals = globalThis as unknown as DedicatedWorkerGlobalScope;\n\n        // This is used to create the onmessage, onmessageerror, and onerror setters\n        const makeSetter = (prop: string, event: string) => {\n            let oldvalue: () => void;\n\n            Object.defineProperty(globals, prop, {\n                get() {\n                    return oldvalue;\n                },\n                set(value) {\n                    if (oldvalue) {\n                        globals.removeEventListener(event, oldvalue);\n                    }\n\n                    oldvalue = value;\n\n                    if (oldvalue) {\n                        globals.addEventListener(event, oldvalue);\n                    }\n                },\n            });\n        };\n\n        // This makes sure that `f` is only run once\n        const memoize = (f: () => void) => {\n            let run = false;\n\n            return () => {\n                if (!run) {\n                    run = true;\n                    f();\n                }\n            };\n        };\n\n\n        // We only start listening for messages / errors when the worker calls addEventListener\n        const startOnMessage = memoize(() => {\n            $worker.parentPort!.on(\"message\", (data) => {\n                workerEvents.dispatchEvent(new MessageEvent(\"message\", { data }));\n            });\n        });\n\n        const startOnMessageError = memoize(() => {\n            throw new Error(\"UNIMPLEMENTED\");\n        });\n\n        const startOnError = memoize(() => {\n            $worker.parentPort!.on(\"error\", (data) => {\n                workerEvents.dispatchEvent(new Event(\"error\"));\n            });\n        });\n\n\n        // Node workers don't have top-level events, so we have to make our own\n        const workerEvents = new EventTarget();\n\n        globals.close = () => {\n            process.exit();\n        };\n\n        globals.addEventListener = (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => {\n            workerEvents.addEventListener(type, callback, options);\n\n            if (type === \"message\") {\n                startOnMessage();\n            } else if (type === \"messageerror\") {\n                startOnMessageError();\n            } else if (type === \"error\") {\n                startOnError();\n            }\n        };\n\n        globals.removeEventListener = (type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => {\n            workerEvents.removeEventListener(type, callback, options);\n        };\n\n        function postMessage(message: any, transfer: Transferable[]): void;\n        function postMessage(message: any, options?: StructuredSerializeOptions | undefined): void;\n        function postMessage(value: any, transfer: any) {\n            $worker.parentPort!.postMessage(value, transfer);\n        }\n\n        globals.postMessage = postMessage;\n\n        makeSetter(\"onmessage\", \"message\");\n        makeSetter(\"onmessageerror\", \"messageerror\");\n        makeSetter(\"onerror\", \"error\");\n    }\n}\n\n\nasync function polyfill() {\n    const [$worker, $os] = await Promise.all([\n        import(\"node:worker_threads\"),\n        import(\"node:os\"),\n    ]);\n\n    patch($worker, $os);\n}\n\nif (globalThis.Worker == null) {\n    await polyfill();\n}\n\nexport {};\n","import \"./polyfill/crypto\";\nimport \"./polyfill/fetch\";\nimport \"./polyfill/xmlhttprequest\";\nimport \"./polyfill/worker\";\n\nif (!globalThis.self) {\n    (globalThis as any).self = globalThis;\n}\n"],"names":[],"mappings":"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"}